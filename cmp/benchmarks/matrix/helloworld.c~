#include "stdio.h"
#include "barrier.h"
#define NPROC 2
volatile int CountLock = 0;

// set data to mian core and get data from main core.
void set_DMA_data(int a[10], int b[4][4])
{
	int p = 4830818000; // the main core origin address

	// MTA_DMA_WRITE write data to main core
	MTA_DMA_WRITE(&a[0], p, 4);

	p = 4830818000;
	// there are three data from main core for array-b.  initial three read request to main core.
	MTA_DMA_READ(&b[0][0], p, 4);

	printf("DMA data set successful!\n");
}

// read matrix data from slave core and init the array
void set_RMA_data(int a[4], int b[4][4], int c[10])
{
	int i;
	// MTA_RMA_WRITE write data to slave core
	MTA_RMA_WRITE(&c[4], &a[0], 4, 5); // write array-c data to array-a

	// there are three data from slave core for array-a;
	MTA_RMA_READ(&b[1][0], &a[0], 4);

	printf("RMA data set successful!\n");
}

// calculate matrix multi
void matrix_multi(int a[4][4], int b[4][4])
{
	int i, j, k;
	int result[4][4] = {0};
	// calculate
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			for (k = 0; k < 4; k++)
			{
				result[i][j] += a[i][k] * b[k][j];
			}
		}
	}

	printf("\nmatrix calculate result is:\n");
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%d  ", b[i][j]);
		}
		printf("\n");
	}
}

int main()
{
	unsigned ProcessId = 0;
	int my_id = 0;
	int readResult = 0;
	int a[4][4] = {{1, 2, 3, 4}, {2, 5, 3, 6}, {2, 4, 1, 3}, {4, 5, 3, 6}};
	int b[4][4] = {{0, 0, 0, 0}, {0, 0, 0, 0}, {3, 7, 2, 1}, {5, 2, 1, 9}};

	int c[10] = {7, 8, 9, 6, 4, 3, 2, 4, 6};

	int d[4] = {0};

	int i, j, k;

	barrier_init(NPROC);
	for (ProcessId = 1; ProcessId < NPROC; ProcessId++)
	{
		my_id = MTA_fork();
		printf("loop %d after fork %d\n", ProcessId, my_id);
		my_id = MTA_getthreadID();
		printf("loop %d after MTA_getthreadID %d\n", ProcessId, my_id);
		if (my_id != 0)
			break;
	}

	MTA_Bar_Stats(1);
	barrier(MTA_getthreadID(), NPROC);
	MTA_Bar_Stats(0);
	MTA_Stats(1);
	{
		MTA_Lock_Stats(1);
		MTA_Lock_Acquire(&CountLock);
		MTA_Lock_Stats(0);

		my_id = MTA_getthreadID();
		if (my_id == 1)
		{
			set_RMA_data(d, b, c);
			set_DMA_data(c, b);
			matrix_multi(a, b);
		}

		MTA_Lock_Stats(1);
		MTA_Lock_Release(&CountLock);
		MTA_Lock_Stats(0);
	}
	MTA_Bar_Stats(1);
	barrier(MTA_getthreadID(), NPROC);
	MTA_Bar_Stats(0);
	MTA_Stats(0);
	while (MTA_wait() == -1)
		;
}